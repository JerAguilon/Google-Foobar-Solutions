My immediate approach to this problem involved a recursive approach. I found that for a given sequence of minions,
the expected time would be:
    Minion1.Time * Minion1.Numerator / Minion1.Denominator
    + (1 - Minion1.Numerator / Minion1.Denominator) * [Recurse on Minion 2 here]
  
The base case would be the final minion, which would just be the amount of time taken for it to answer.
With my equation formed, I broke the problem down to the following approach:

    1) Transform each minion list into a minion object for convenience.
    2) Create a 1-D list `minionList of MinionInfo objects
    3) Generate a list of all permutations of minionList
    4) Calculate expected time for each permutation, keeping track of the latest one.
    
While this worked locally, step 3 gave the solution a time complexity of O(N!), which would cause the solution
to time out upon submission to Google.

To boost efficiency, I happened upon the fact that each minion could be assigned a point system given by:
    points = MinionN.time / (MinionN.Numerator / MinionN.Demoniator)

Minions with a lower points should be prioritized. Research into the Arrays.sort() method also told me that
it internally uses a stable timsort, which addresses the lexigraphic preference given by the readme. Thus, it
was as simple as sorting with the Arrays.sort() method. This boosted the time complexity into O(N*LOG(N)),
preventing the solution from timing out.
