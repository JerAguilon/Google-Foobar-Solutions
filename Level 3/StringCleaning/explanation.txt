Algorithm choice: Judging from the examples, I suspect that KMP would be a good choice. I'm willing to bet that 
the alphabet will be small for the test cases. I've coded Rabin-Karp, KMP, and Boyer-Moore before, and KMP runs
fastest on smaller alphabets.

Approach #1:
1) Return all incidences of the pattern match
2) Find a way to check for collisions between substrings (e.x. matching "ABA" to "ABABA" 
   results in a collision of [ABA]ba and ab[ABA]). This could be built into the KMP alg.
3) Remove all substrings.
4) Return to 1 until no incidences are found. 

The run time for each pass through would be O(c+w), c = chunk length, w = word length. 
______________________________________________________________________________________

Upon testing the above approach, I found that it would fail the last of the five test cases. I've isolated that
to not handling "branch" cases (I couldn't find a clean way to implement step 2):
      chunk = "testababab", word = "aba"
This is due to the overlap between the patterns causing branches in the solution. This creates a tree structure below:

                  testababab
                  /        \
               testbab    testabb 

To hit every possible case of removal, preorder traversal can be done recursively, where the base case is
when the KMP algorithm fails to find children to recurse on:

Approach #2:
1) Return all incidences of initial pattern match.
2) Initialize a storage String pointer that will store the node with the best case.
   For now we can store it in the pointer.
3) Recurse on all cases of removing a pattern, checking if the current nodes beat the
   String storer (in other words, it is eihter shorter or lexicographically earlier 
   than then current best node).
4) Base case: If the chunk no longer contains the word, you've reached a leaf in the tree.

