Coming up with an initial solution to this problem was fairly simple. Since
A player could take a wide array of paths, I decided to take a recursive
approach. Given the inputs (t = number of rolls, n = number of squares), I
broke it down like so:

    1) Base cases: return IF: n - position > movesLeft,
                              position == n
    2) If you can move right, recursively call the function incrementing position
    3) If you can move left, recursively call the function, decrementing position
    4) You can always stay in the same spot

If a base case is reached with 0 moves remaining, then we have found a unique
solution. While this passed all my test cases, it would still time out.
Therefore, I needed to formulate a more intelligent way to recurse.
